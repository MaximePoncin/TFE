(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("widgets/pretty-checkbox", [], factory);
	else if(typeof exports === 'object')
		exports["widgets/pretty-checkbox"] = factory();
	else
		root["widgets/pretty-checkbox"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ({

/***/ 16:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
function init(Survey) {
    const widget = {
        settings: {
            supportedTypes: ["radiogroup", "checkbox", "boolean"],
            radiogroup: {
                rootClass: "pretty p-default p-round",
                inputType: "radio",
                states: [
                    {stateClass: "state p-success", addOn: ""}
                ]
            },
            checkbox: {
                rootClass: "pretty p-default",
                inputType: "checkbox",
                states: [
                    {stateClass: "state p-success", addOn: ""}
                ]
            },
            boolean: {
                rootClass: "pretty p-icon p-default p-has-indeterminate",
                inputType: "checkbox",
                states: [
                    {stateClass: "state p-success", addOn: ""},
                    {stateClass: "state p-success p-is-indeterminate", iconClass: "icon mdi mdi-minus", addOn: ""}
                ]
            }
        },
        name: "pretty-checkbox",
        activatedBy: "property",
        widgetIsLoaded: function () {
            return true;
        },
        htmlTemplate: "<fieldset></fieldset>",
        isFit: function (question) {
            const isFitByType = widget.settings.supportedTypes.indexOf(question.getType()) !== -1;

            if (widget.activatedBy === "property") {
                return question["renderAs"] === "prettycheckbox" && isFitByType;
            } else if (widget.activatedBy === "type") {
                return isFitByType;
            }

            return false;
        },
        activatedByChanged: function (value) {
            if (this.widgetIsLoaded()) {
                widget.activatedBy = value;
                widget.settings.supportedTypes.forEach(function(supportedType) {
                    Survey.JsonObject.metaData.removeProperty(supportedType, "renderAs");

                    if (value === "property") {
                        Survey.JsonObject.metaData.addProperty(supportedType, {
                            name: "renderAs",
                            default: "standard",
                            choices: ["standard", "prettycheckbox"]
                        });
                    }
                });
            }
        },
        isDefaultRender: false,
        afterRender: function (question, element) {
            const itemInputs = {};
            const questionType = question.getType();
            const options = this.settings[questionType];
            const checkboxType = questionType === "checkbox";
            const radiogroupType = questionType === "radiogroup";
            const booleanType = questionType === "boolean";

            var inChangeHandler = false;
            const changeHandler = function (event) {
                inChangeHandler = true;
                try {
                    const target = arguments[0].target;
                    const targetValue = target.value;
                    const targetChecked = target.checked;

                    if (checkboxType) {
                        const questionValue = question.value || [];
                        const valueIndex = questionValue.indexOf(targetValue);
                        if (targetChecked) {
                            if (valueIndex === -1) {
                                questionValue.push(targetValue);
                            }
                        } else {
                            if (valueIndex !== -1) {
                                questionValue.splice(valueIndex, 1);
                            }
                        }

                        question.value = questionValue;
                    } else if (radiogroupType) {
                        question.value = targetValue;
                    } else {
                        question.value = targetChecked;
                    }
                } finally {
                    inChangeHandler = false;
                }
            };

            const itemWidth = question.colCount > 0 ? 100 / question.colCount + "%" : "";

            const choices = booleanType ? [{locText: question.locTitle, value: !!question.value}] : question.choices;
            choices.forEach(function (choiceItem, index) {
                const input = document.createElement("input");
                input.type = options.inputType;
                input.name = question.name + (checkboxType ? "" + index : "");
                input.onchange = changeHandler;
                input.value = choiceItem.value;

                if (booleanType) {
                    input.indeterminate = (question.defaultValue === 'indeterminate');
                }

                const controlRoot = document.createElement("div");
                controlRoot.className = options.rootClass;
                controlRoot.appendChild(input);

                options.states.forEach(function(state) {
                    const stateRoot = document.createElement("div");
                    stateRoot.className = state.stateClass;
                    if (!!state.iconClass) {
                        const icon = document.createElement("i");
                        icon.className = state.iconClass;
                        stateRoot.appendChild(icon);
                    }

                    const label = document.createElement("label");
                    if (choiceItem.locText.hasHtml) {
                        label.innerHTML = choiceItem.locText.html;
                    } else {
                        label.textContent = choiceItem.locText.text;
                    }
                    stateRoot.appendChild(label);

                    controlRoot.appendChild(stateRoot);
                    if (!!state.addOn) {
                        stateRoot.insertAdjacentHTML("afterbegin", state.addOn);
                    }
                });

                const itemRoot = document.createElement("div");
                itemRoot.className = "sv_cw_pretty_checkbox_" + questionType;
                itemRoot.style.display = "inline-block";
                itemRoot.style.width = itemWidth;
                itemRoot.appendChild(controlRoot);

                element.appendChild(itemRoot);

                itemInputs[choiceItem.value] = input;
            });

            const updateValueHandler = function (newValue) {
                if (!inChangeHandler) {
                    var checkedItems = newValue || [];
                    if (radiogroupType) {
                        checkedItems = [newValue];
                    }

                    Object.values(itemInputs).forEach(function (inputItem) {
                        if (checkedItems.indexOf(inputItem.value) !== -1) {
                            inputItem.setAttribute("checked", undefined);
                        } else {
                            inputItem.removeAttribute("checked");
                        }
                    });
                }
            };

            question.valueChangedCallback = updateValueHandler;
            updateValueHandler(question.value);
        },
        willUnmount: function (question, el) {
            question.valueChangedCallback = undefined;
        }
    };

    Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "property");
}

if (typeof Survey !== "undefined") {
    init(Survey);
}

/* harmony default export */ __webpack_exports__["default"] = (init);


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,